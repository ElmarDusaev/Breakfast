// <auto-generated />
using System;
using Breakfast.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Breakfast.Migrations
{
    [DbContext(typeof(BreakfastDbContext))]
    [Migration("20200324201401_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Breakfast.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Завтраки"
                        });
                });

            modelBuilder.Entity("Breakfast.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientToken")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Breakfast.Models.OrderBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("Breakfast.Models.OrderDtl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderHdrId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHdrId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDtls");
                });

            modelBuilder.Entity("Breakfast.Models.OrderHdr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Sum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("OrderHdrs");
                });

            modelBuilder.Entity("Breakfast.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("IsHit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Stars")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Приготовить яичницу может любой человек, даже совершенно далекий от кулинарии. Сытно, просто, быстро и очень вкусно — именно так, коротко и ясно, можно охарактеризовать это блюдо. Чтобы сохранить желтки яиц целыми, достаточно просто аккуратно вылить яйцо на сковороду с маслом и поджарить их с одной или двух сторон. В зависимости от способа приготовления различают следующие виды яичницы-глазуньи: яичница-глазунья классическая; с беконом; яичница в форме сердца, цветка, солнца и т. д.; яйцо, поджаренное в хлебе; яичница, запеченная в помидорах, булочке или картофеле; яйцо в перце. И это не считая национальных блюд, которые готовят на разных кухнях мира. Способов приготовления яичницы, на самом деле, очень много. Все зависит от фантазии и финансовых возможностей самого человека.",
                            Image = "https://omj.ru/wp-content/uploads/2017/04/8ffa491e973b0c0fafc37397c73e633c.jpg",
                            IsHit = true,
                            Name = "Классическая глазунья",
                            Price = 300.0,
                            Stars = 4.9000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Полная противоположность глазунье — яичница-болтунья, при приготовлении которой яйца сначала взбивают с помощью вилки с солью, а затем уже обжаривают на сковороде со сливочным маслом. В зависимости от особенностей процесса приготовления бывают разные виды яичницы. Рецепты из приготовления заключаются в следующем: Яичница-болтунья по-английски. Для приготовления блюда 2 яйца взбивают вилкой со щепоткой соли и выливают на сковороду с разогретым сливочным маслом (20 г). В процессе жарки их постоянно перемешивают лопаткой, чтобы формировались слегка обжаренные комочки. Готовую яичницу рекомендуется подавать, выложив прямо на обжаренный тост. Яичница-болтунья по-французски. Для приготовления такого блюда 4 яйца взбивают венчиком с солью, а затем прямо в миске нагревают на водяной бане до готовности. Время приготовления такой яичницы составляет не менее 10 минут, при этом ее также необходимо перемешивать лопаткой для образования комочков. Общий принцип приготовления болтуньи — ни желтки, ни белки не должны оставаться целыми.",
                            Image = "https://omj.ru/wp-content/uploads/2017/04/0d04a1f18f9903f1da702c163e7553f5.jpg",
                            IsHit = false,
                            Name = "Яичница-болтунья",
                            Price = 850.0,
                            Stars = 4.5999999999999996,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Одним из самых оригинальных и одновременно простых вариантов приготовления глазуньи является яичница с сосиской в форме сердца. И совсем необязательно ждать подходящего праздника, чтобы порадовать таким завтраком свою вторую половинку. Яичница с сосиской в виде сердца по времени готовится ничуть не дольше традиционной глазуньи с сосиской. При этом выглядит блюдо намного аппетитнее и интереснее. Сосиска разрезается вдоль таким способом, чтобы один край ее оставался непрорезанным. Разрезанная сосиска разделяется на две половинки, выворачивается в обратную сторону и выкладывается в форме сердца. Свободные края сосиски скрепляются зубочисткой. Налить на сковороду немного растительного масла, разогреть его и выложить сердечко из сосиски на сковороду. Немного обжарить сердечко с одной стороны, перевернуть на другую и разбить в центр яйцо. Добавить немного соли и перца по вкусу. Жарить яичницу до готовности, затем переложить на тарелку, украсить зеленью и тостами. Существуют и другие виды яичниц с сосиской, которые при подаче на стол выглядят также оригинально. Ниже рассмотрим пошаговое приготовление некоторых из них.",
                            Image = "https://omj.ru/wp-content/uploads/2017/04/d7d4038d7da2cfbf2589a034b4004501.jpg",
                            IsHit = false,
                            Name = "Яичница с сосиской в виде сердца",
                            Price = 1250.0,
                            Stars = 4.4000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Яйцо и сосиска — традиционное сочетание продуктов для приготовления яичницы. Но из этих двух ингредиентов можно легко сделать оригинальное блюдо. Яичница с сосиской в виде ромашки готовится в такой последовательности: Сосиска разрезается вдоль на 2 половинки. Затем на каждой части делаются надрезы, напоминающие бахрому. После этого обе половинки складываются в круг и скрепляются зубочистками. Из второй сосиски можно сделать еще пару цветов. Подготовленные сосиски выкладываются на сковороду с растительным маслом. В центр цветочка разбивается 1 яйцо. Желток яйца должен занять место серединки цветка. Как только яйца поджарятся их можно переложить на тарелку и украсить веточкой петрушки. Такая яичница с сосисками в виде цветочка станет отличным вариантом праздничного завтрака для женщины или ребенка. Приготовить ее совсем несложно и под силу каждому мужчине.",
                            Image = "https://omj.ru/wp-content/uploads/2017/04/785427770d9e097453e2db40cee911e4.jpg",
                            IsHit = false,
                            Name = "Цветочная тема в яичнице",
                            Price = 1550.0,
                            Stars = 4.2000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Очень аккуратно и аппетитно смотрится яичница, имеющая четко обозначенные края. Чтобы белок не растекался безобразно по сковороде, а принял определенную форму, используют специальные ограничители. Эту функцию могут выполнять специальные силиконовые формы, сосиски, скрепленные зубочисткой определенным способом, овощи (перец, лук) и хлеб. Таким образом, получаются новые и оригинальные виды яичниц. Аппетитную и вкусную яичницу на сковороде можно поджарить одновременно с хлебом, получив таким способом интересную закуску, завтрак или перекус. Яичница в виде сердца в хлебе готовится в такой последовательности: Белый или ржаной хлеб нарезается кусочками толщиной 1−1,5 см. Также можно использовать уже нарезанный хлеб для тостов. При помощи вырубки для печенья в мякише вырезается отверстие. Также можно воспользоваться обычным ножом, но края формы могут получиться не такими аккуратными. В сковороде разогревается немного сливочного и растительного масла. В центр сковороды выкладывается кусочек хлеба и обжаривается с одной стороны до румяной корочки. Затем хлеб переворачивается на другую сторону и в сделанное вырубкой отверстие разбивается яйцо. Добавляется соль и перец. Яйцо жарится на сковороде около 5 минут. После этого яичницу рекомендуется поместить в разогретую до 180° духовку на 5 минут, чтобы белок хорошо загустел. Вместо вырубки для печенья в виде сердца можно использовать и другую форму, например, круг, звездочку, цветок.",
                            Image = "https://omj.ru/wp-content/uploads/2017/04/4a1fa458fea1c74302fb2bf21b661a81.jpg",
                            IsHit = false,
                            Name = "Яичница в хлебе",
                            Price = 1850.0,
                            Stars = 4.0999999999999996,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2aa5d1b7-23ed-4f46-9bcf-bfbcc6037d40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3238298a-8824-4261-83d2-b05d3b1338f4",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECh9hs6a97IDP2+QzQKnGUSWLaP5lHGcP6fohafedIW0d1lbq2B5WPcg9AVLUJqPnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Breakfast.Models.OrderBasket", b =>
                {
                    b.HasOne("Breakfast.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Breakfast.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Breakfast.Models.OrderDtl", b =>
                {
                    b.HasOne("Breakfast.Models.OrderHdr", "OrderHdr")
                        .WithMany("OrderDtls")
                        .HasForeignKey("OrderHdrId");

                    b.HasOne("Breakfast.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Breakfast.Models.OrderHdr", b =>
                {
                    b.HasOne("Breakfast.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Breakfast.Models.Product", b =>
                {
                    b.HasOne("Breakfast.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
