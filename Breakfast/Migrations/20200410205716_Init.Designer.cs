// <auto-generated />
using System;
using Breakfast.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Breakfast.Migrations
{
    [DbContext(typeof(BreakfastDbContext))]
    [Migration("20200410205716_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Breakfast.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "#Завтраки"
                        },
                        new
                        {
                            Id = 2,
                            Name = "#Десерты"
                        },
                        new
                        {
                            Id = 3,
                            Name = "#Соки"
                        },
                        new
                        {
                            Id = 4,
                            Name = "#Хлеб"
                        });
                });

            modelBuilder.Entity("Breakfast.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientToken")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientToken = "6be1f4fa-4c32-44ad-85e2-8c5387e0c0aa"
                        },
                        new
                        {
                            Id = 2,
                            ClientToken = "7961ff2b-16ee-4ff2-9395-65cb0c078985"
                        },
                        new
                        {
                            Id = 3,
                            ClientToken = "1856b198-d205-4b9d-84e6-7c3413c7bf7c"
                        },
                        new
                        {
                            Id = 4,
                            ClientToken = "82003d01-9924-43d7-b32b-afeb16bb8302"
                        },
                        new
                        {
                            Id = 5,
                            ClientToken = "8bba2fa4-073b-456a-90b9-be5876c72301"
                        },
                        new
                        {
                            Id = 6,
                            ClientToken = "4c8ada0c-23db-4342-9689-e8728ec37f00"
                        },
                        new
                        {
                            Id = 7,
                            ClientToken = "308a1201-c902-408a-9a51-42c9ed55a2b6"
                        });
                });

            modelBuilder.Entity("Breakfast.Models.OrderBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("Breakfast.Models.OrderDtl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderHdrId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHdrId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDtls");
                });

            modelBuilder.Entity("Breakfast.Models.OrderHdr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Sum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("OrderHdrs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Школа Чародейства и Волшебства Хогвартс 1",
                            ClientId = 1,
                            ClientName = "Невилл Долгопупс",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 820, DateTimeKind.Local).AddTicks(8026),
                            DeliveryDateTime = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Школа Чародейства и Волшебства Хогвартс 2",
                            ClientId = 2,
                            ClientName = "Сириус Блек",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7213),
                            DeliveryDateTime = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 3,
                            Address = "Школа Чародейства и Волшебства Хогвартс 3",
                            ClientId = 3,
                            ClientName = "Гермиона Грейнджер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7491),
                            DeliveryDateTime = new DateTime(2020, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 3,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 4,
                            Address = "Школа Чародейства и Волшебства Хогвартс 4",
                            ClientId = 4,
                            ClientName = "Гарри Поттер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7495),
                            DeliveryDateTime = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 1,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 5,
                            Address = "Школа Чародейства и Волшебства Хогвартс 5",
                            ClientId = 5,
                            ClientName = "Рональд Уизли",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7500),
                            DeliveryDateTime = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 4,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 6,
                            Address = "Школа Чародейства и Волшебства Хогвартс 6",
                            ClientId = 6,
                            ClientName = "Игорь Николев",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7504),
                            DeliveryDateTime = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 4,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 7,
                            Address = "Школа Чародейства и Волшебства Хогвартс 7",
                            ClientId = 7,
                            ClientName = "Альбус Дамблдор",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7636),
                            DeliveryDateTime = new DateTime(2020, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 0,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 8,
                            Address = "Школа Чародейства и Волшебства Хогвартс 1",
                            ClientId = 1,
                            ClientName = "Невилл Долгопупс",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7641),
                            DeliveryDateTime = new DateTime(2020, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 0,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 9,
                            Address = "Школа Чародейства и Волшебства Хогвартс 2",
                            ClientId = 2,
                            ClientName = "Сириус Блек",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7645),
                            DeliveryDateTime = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 0,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 10,
                            Address = "Школа Чародейства и Волшебства Хогвартс 3",
                            ClientId = 3,
                            ClientName = "Гермиона Грейнджер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7649),
                            DeliveryDateTime = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 0,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 11,
                            Address = "Школа Чародейства и Волшебства Хогвартс 4",
                            ClientId = 4,
                            ClientName = "Гарри Поттер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7649),
                            DeliveryDateTime = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 12,
                            Address = "Школа Чародейства и Волшебства Хогвартс 5",
                            ClientId = 5,
                            ClientName = "Рональд Уизли",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7653),
                            DeliveryDateTime = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 4,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 13,
                            Address = "Школа Чародейства и Волшебства Хогвартс 6",
                            ClientId = 6,
                            ClientName = "Игорь Николев",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7658),
                            DeliveryDateTime = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 4,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 14,
                            Address = "Школа Чародейства и Волшебства Хогвартс 7",
                            ClientId = 7,
                            ClientName = "Альбус Дамблдор",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7662),
                            DeliveryDateTime = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 1,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 15,
                            Address = "Школа Чародейства и Волшебства Хогвартс 1",
                            ClientId = 1,
                            ClientName = "Невилл Долгопупс",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7666),
                            DeliveryDateTime = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 1,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 16,
                            Address = "Школа Чародейства и Волшебства Хогвартс 1",
                            ClientId = 1,
                            ClientName = "Невилл Долгопупс",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7666),
                            DeliveryDateTime = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 17,
                            Address = "Школа Чародейства и Волшебства Хогвартс 2",
                            ClientId = 2,
                            ClientName = "Сириус Блек",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7670),
                            DeliveryDateTime = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 18,
                            Address = "Школа Чародейства и Волшебства Хогвартс 3",
                            ClientId = 3,
                            ClientName = "Гермиона Грейнджер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7675),
                            DeliveryDateTime = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 3,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 19,
                            Address = "Школа Чародейства и Волшебства Хогвартс 3",
                            ClientId = 3,
                            ClientName = "Гермиона Грейнджер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7675),
                            DeliveryDateTime = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 4,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 20,
                            Address = "Школа Чародейства и Волшебства Хогвартс 4",
                            ClientId = 4,
                            ClientName = "Гарри Поттер",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7679),
                            DeliveryDateTime = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 0,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 21,
                            Address = "Школа Чародейства и Волшебства Хогвартс 5",
                            ClientId = 5,
                            ClientName = "Рональд Уизли",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7683),
                            DeliveryDateTime = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 22,
                            Address = "Школа Чародейства и Волшебства Хогвартс 5",
                            ClientId = 5,
                            ClientName = "Рональд Уизли",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7688),
                            DeliveryDateTime = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 23,
                            Address = "Школа Чародейства и Волшебства Хогвартс 7",
                            ClientId = 7,
                            ClientName = "Альбус Дамблдор",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7688),
                            DeliveryDateTime = new DateTime(2020, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 24,
                            Address = "Школа Чародейства и Волшебства Хогвартс 7",
                            ClientId = 7,
                            ClientName = "Альбус Дамблдор",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7692),
                            DeliveryDateTime = new DateTime(2020, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 25,
                            Address = "Школа Чародейства и Волшебства Хогвартс 7",
                            ClientId = 7,
                            ClientName = "Альбус Дамблдор",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7696),
                            DeliveryDateTime = new DateTime(2020, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 26,
                            Address = "Школа Чародейства и Волшебства Хогвартс 7",
                            ClientId = 7,
                            ClientName = "Альбус Дамблдор",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7696),
                            DeliveryDateTime = new DateTime(2020, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 27,
                            Address = "Школа Чародейства и Волшебства Хогвартс 2",
                            ClientId = 2,
                            ClientName = "Сириус Блек",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7700),
                            DeliveryDateTime = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 28,
                            Address = "Школа Чародейства и Волшебства Хогвартс 5",
                            ClientId = 5,
                            ClientName = "Рональд Уизли",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7705),
                            DeliveryDateTime = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 29,
                            Address = "Школа Чародейства и Волшебства Хогвартс 5",
                            ClientId = 5,
                            ClientName = "Рональд Уизли",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7705),
                            DeliveryDateTime = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        },
                        new
                        {
                            Id = 30,
                            Address = "Школа Чародейства и Волшебства Хогвартс 4",
                            ClientId = 4,
                            ClientName = "Игорь Николев",
                            CreatedDate = new DateTime(2020, 4, 10, 23, 57, 15, 823, DateTimeKind.Local).AddTicks(7709),
                            DeliveryDateTime = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 15.0,
                            Longtitude = 16.0,
                            Phone = "1234567890",
                            Status = 2,
                            Sum = 120.0
                        });
                });

            modelBuilder.Entity("Breakfast.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(550);

                    b.Property<bool>("IsHit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Stars")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Image = "https://i.ytimg.com/vi/s0L8hrM6dXw/maxresdefault.jpg",
                            IsHit = true,
                            Name = "Яичница в хлебе",
                            Price = 90.0,
                            Stars = 4.9000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Image = "https://foodandmood.com.ua/i/70/97/05/709705/gallery/e6a40ddde8c4b09d1c72dcdaae662a96-quality_75Xresize_1Xallow_enlarge_0Xw_700Xh_700.jpg",
                            IsHit = false,
                            Name = "Яичница по‑французски",
                            Price = 100.0,
                            Stars = 4.5999999999999996,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Image = "https://img1.liveinternet.ru/images/attach/d/0/143/161/143161575_6425626_zavtrak_za_20_min_1.jpg",
                            IsHit = false,
                            Name = "Яичница в помидоре",
                            Price = 110.0,
                            Stars = 4.4000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Image = "https://elisheva.ru/uploads/posts/2016-11/1478615735_nezhnyi-omlet-s-gribami-i-syrom.jpg",
                            IsHit = false,
                            Name = "Бульбяная яичница",
                            Price = 135.0,
                            Stars = 4.2000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Image = "https://moi-kulinar.ru/uploads/posts/2018-07/1530946713_yaichnitsa-v-pertse.jpg",
                            IsHit = false,
                            Name = "Яичница в перце",
                            Price = 125.0,
                            Stars = 4.0999999999999996,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Image = "https://omj.ru/wp-content/uploads/2017/04/4a1fa458fea1c74302fb2bf21b661a81.jpg",
                            IsHit = false,
                            Name = "Яичница в помидорах",
                            Price = 220.0,
                            Stars = 4.2000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Image = "https://foodman.club/wp-content/uploads/2017/10/21-5.jpg",
                            IsHit = false,
                            Name = "Яичница по‑французски в хлебе",
                            Price = 185.0,
                            Stars = 4.2999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Image = "https://cs8.pikabu.ru/post_img/2017/04/05/4/1491367487164439680.png",
                            IsHit = false,
                            Name = "Яичница со сметаной",
                            Price = 200.0,
                            Stars = 4.0999999999999996,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Image = "https://fannykitchen.com/image/ing/2299.jpg",
                            IsHit = false,
                            Name = "Яичница-глазунья",
                            Price = 185.0,
                            Stars = 4.4000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Image = "https://cdn.segodnya.ua/img/article/11299/45_main_new.1523463015.jpg",
                            IsHit = false,
                            Name = "Яичница-болтунья со шпинатом",
                            Price = 140.0,
                            Stars = 4.5,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Image = "https://www.owoman.ru/assets/images/cook/boltunya_iz_yaic2.jpg",
                            IsHit = false,
                            Name = "Яичница-болтунья",
                            Price = 150.0,
                            Stars = 4.7000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Image = "https://imgtest.mir24.tv/uploaded/images/crops/2018/October/870x489_1x1_detail_crop_c2325328884af7e2fee9343cbbe83a13f13d6a347fd4b10a5b98255587d6845f.jpg",
                            IsHit = false,
                            Name = "Яичница с брынзой",
                            Price = 145.0,
                            Stars = 4.7999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Image = "https://foodmag.me/wp-content/uploads/2017/05/yaichnitsa-v-pertsah-1.jpg",
                            IsHit = false,
                            Name = "Взбитая яичница",
                            Price = 135.0,
                            Stars = 4.9000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Image = "https://foodmag.me/wp-content/uploads/2017/05/yaichnitsa-v-pertsah-1-650x450.jpg",
                            IsHit = false,
                            Name = "Яичница по‑баскски",
                            Price = 210.0,
                            Stars = 4.2000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Image = "https://media-cdn.tripadvisor.com/media/photo-s/08/9b/f2/3e/caption.jpg",
                            IsHit = false,
                            Name = "Яичница по‑кончаловски",
                            Price = 150.0,
                            Stars = 4.2999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Image = "https://www.koolinar.ru/all_image/recipes/144/144777/recipe_1b7d00e6-ae0c-4d14-b3ee-fa3af188873c_large.jpg",
                            IsHit = false,
                            Name = "Классический чизкейк",
                            Price = 250.0,
                            Stars = 4.0999999999999996,
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Image = "https://sovkusom.ru/wp-content/uploads/recepty/k/kak-prigotovit-smetannyi-tort-na-skovorode/thumb-840x440.jpg",
                            IsHit = false,
                            Name = "Сметанный торт",
                            Price = 250.0,
                            Stars = 4.2000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Image = "https://www.koolinar.ru/all_image/recipes/144/144903/recipe_3865e7be-2722-40a3-87a7-4634c5dfced4_large.jpg",
                            IsHit = false,
                            Name = "Шоколадные маффины",
                            Price = 250.0,
                            Stars = 4.2999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            Image = "https://img03.rl0.ru/7ecccd2ce12010f05a4e3f36a6fbb120/c615x400i/news.rambler.ru/img/2019/01/12025238.761283.5915.jpeg",
                            IsHit = false,
                            Name = "Свежевыжатый гранатовый сок",
                            Price = 100.0,
                            Stars = 4.7999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            Image = "https://polzavred-edi.ru/wp-content/uploads/2019/06/polza-i-vred-apelsinovogo-soka.jpg",
                            IsHit = false,
                            Name = "Свежевыжатый апельсиновый сок",
                            Price = 80.0,
                            Stars = 4.7000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            Image = "https://www.inmoment.ru/img/health-body/grapes-juice1.jpg",
                            IsHit = false,
                            Name = "Свежевыжатый виноградный сок",
                            Price = 80.0,
                            Stars = 4.7000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            Image = "https://cafesahara.ru/upload/iblock/7ed/7eddcb30773af9e076d4d6ae8bc6a96a.jpg",
                            IsHit = false,
                            Name = "Свежевыжатый ананасовый сок",
                            Price = 80.0,
                            Stars = 4.7000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/13.jpg",
                            IsHit = false,
                            Name = "Белый хлеб",
                            Price = 55.0,
                            Stars = 4.0999999999999996,
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/22.jpg",
                            IsHit = false,
                            Name = "Черный хлеб",
                            Price = 45.0,
                            Stars = 4.2999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/22.jpg",
                            IsHit = false,
                            Name = "Красносельский хлеб",
                            Price = 65.0,
                            Stars = 4.2000000000000002,
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/7_russkix_xlebov.jpg",
                            IsHit = false,
                            Name = "Заварной хлеб",
                            Price = 75.0,
                            Stars = 4.2999999999999998,
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/53.jpg",
                            IsHit = false,
                            Name = "Бородинский хлеб",
                            Price = 80.0,
                            Stars = 4.4000000000000004,
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/63.jpg",
                            IsHit = false,
                            Name = "Московский боярский хлеб",
                            Price = 70.0,
                            Stars = 4.5,
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 4,
                            Image = "http://russian7.ru/wp-content/uploads/2013/03/81.jpg",
                            IsHit = false,
                            Name = "Стародубский хлеб",
                            Price = 45.0,
                            Stars = 4.5999999999999996,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "5d9cd6d4-e917-4826-a284-de69a9b45674",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ad9a4b6-b6d2-4f05-b444-7e5aab25f6e8",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEObGWqDM0Kjna1Igiq2rLrpjwwRTf5iHpYGBY/1xVvzGKCrMKjJRAZyk3BTgLwMIMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Breakfast.Models.OrderBasket", b =>
                {
                    b.HasOne("Breakfast.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Breakfast.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Breakfast.Models.OrderDtl", b =>
                {
                    b.HasOne("Breakfast.Models.OrderHdr", "OrderHdr")
                        .WithMany("OrderDtls")
                        .HasForeignKey("OrderHdrId");

                    b.HasOne("Breakfast.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Breakfast.Models.OrderHdr", b =>
                {
                    b.HasOne("Breakfast.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Breakfast.Models.Product", b =>
                {
                    b.HasOne("Breakfast.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
